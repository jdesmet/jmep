/* * JMEP - Java Mathematical Expression Parser. * Copyright (C) 1999  Jo Desmet *  * This library is free software; you can redistribute it and/or * modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation; either * version 2.1 of the License, or any later version. *  * This library is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU * Lesser General Public License for more details. *  * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA *  * You can contact the Original submitter of this library by * email at: Jo_Desmet@yahoo.com. *  */ package com.googlecode.jmep;import com.googlecode.jmep.hooks.Constant;import com.googlecode.jmep.hooks.Unit;import com.googlecode.jmep.hooks.Variable;import com.googlecode.jmep.hooks.Function;import java.util.Map;import java.util.HashMap;/** * The container for user defined functions, variables and units. Every * class that needs to use the Expression class should either contain or * subclass the Environment class. Note that this class is not thread * safe. * @author Jo Desmet * @see com.iabcinc.jmep.Expression */public class Environment {  private HashMap<String,Variable> variables;  private HashMap<String,Function> functions;  private HashMap<String,Unit> units;      /**   * Allocates the Expression Environment.   */  public Environment() {    variables = new HashMap<String,Variable>();    functions = new HashMap<String,Function>();    units = new HashMap<String,Unit>();  }  /**   * Adds a labeled String constant to the environment.   * @param name the label attached to the constant.   * @param value the string value of the labeled constant.   */  public void addConstant(String name,final String value) {    variables.put(name,new Constant(value));  }    /**   * Adds a labeled Double constant to the environment.   * @param name the label attached to the constant.   * @param value the double value of the labeled constant.   */  public void addConstant(String name,final double value) {    variables.put(name,new Constant(new Double(value)));  }    /**   * Adds a labeled int constant to the environment.   * @param name the label attached to the constant.   * @param value the int value of the labeled constant.   */  public void addConstant(String name,final long value) {    variables.put(name,new Constant(new Long(value)));  }  /**   * Adds a labeled variable to the environment. This is done by   * using an adapter class. You can either use an inner class or   * an anonymous class for this purpose.   * @param name the label attached to the variable.   * @param variable the variable call-back instance.   * @see com.iabcinc.jmep.Variable   */  public void addVariable(String name,Variable variable) {    variables.put(name,variable);  }  /**   * Returns a map containing all the variables and constants. The   * contents will be of type: String, Double, Integer or Variable.   * Note that you can interact directly with this map.   * @see com.iabcinc.jmep.Environment#addConstant   * @see com.iabcinc.jmep.Environment#addVariable   */  public Map<String,Variable> getVariables() {    return variables;  }    /**   * Returns a map containing all the units. The contents will be   * only of type Unit.   * Note that you can interact directly with this map.   * @see com.iabcinc.jmep.Environment#addUnit   */  public Map<String,Unit> getUnits() {    return units;  }    /**   * Returns a map containing all the functions. The contents will be   * only of type Function.   * Note that you can interact directly with this map.   * @see com.iabcinc.jmep.Environment#addFunction   */  public Map<String,Function> getFunctions() {    return functions;  }    /**   * Returns the labeled variable. Depending how the variable was   * added, this could be: String, Double, Integer or Variable.   * @see com.iabcinc.jmep.Environment#addConstant   * @see com.iabcinc.jmep.Environment#addVariable   */  public Variable getVariable(String name) {    return variables.get(name);  }    /**   * Returns the labeled unit.   * @see com.iabcinc.jmep.Environment#addUnit   */  public Unit getUnit(String name) {    return (Unit)units.get(name);  }    /**   * Returns the labeled function.   * @see com.iabcinc.jmep.Environment#addFunction   */  public Function getFunction(String name) {    return (Function)functions.get(name);  }    /**   * Adds a Function to the environment. This is done by using an   * adapter class. You can either us an inner class or an anonymous   * class for this purpose.   * @param name the label attached to the added function.   * @param function the function call-back instance.   * @see com.iabcinc.jmep.Function   */  public void addFunction(String name,Function function) {    functions.put(name,function);  }    /**   * Adds a Unit to the environment. This is done by using an   * adapter class. You can either us an inner class or an anonymous   * class for this purpose.   * @param name the label attached to the added unit.   * @param unit the unit call-back instance.   * @see com.iabcinc.jmep.Unit   */  public void addUnit(String name,Unit unit) {    units.put(name,unit);  }  }