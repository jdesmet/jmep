/* * JMEP - Java Mathematical Expression Parser. * Copyright (C) 1999  Jo Desmet *  * This library is free software; you can redistribute it and/or * modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation; either * version 2.1 of the License, or any later version. *  * This library is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU * Lesser General Public License for more details. *  * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA *  * You can contact the Original submitter of this library by * email at: Jo_Desmet@yahoo.com. *  */package com.googlecode.jmep;import com.googlecode.jmep.hooks.BinaryOperator;import java.util.Map;class BINToken extends Token {    private final BinaryOperatorType binaryOperatorType;  BINToken(BinaryOperatorType binaryOperatorType,int position) {    super(Token.Type.BIN,position);    this.binaryOperatorType = binaryOperatorType;  }    int getPrecedence() {    return binaryOperatorType.getPrecedence();  }  BinaryOperatorType getBinaryOperatorType() {    return binaryOperatorType;  }    Object evaluate(Environment environment,Object leftOperand, Object rightOperand)  throws XExpression {    Map<SimpleClassPair,BinaryOperator> implementations = environment.getBinaryOperators().get(this.binaryOperatorType);    SimpleClassPair p = SimpleClassPair.of(leftOperand.getClass(), rightOperand.getClass());    BinaryOperator operation = implementations.get(p);    if (operation == null) throw new XIllegalOperation(this,leftOperand,rightOperand);    try {      return operation.apply(leftOperand, rightOperand);    } catch (IllegalArgumentException x) {      throw new XIllegalOperation(this, leftOperand, rightOperand);    }  }}