import static org.junit.Assert.*;import com.iabcinc.jmep.*;import com.iabcinc.jmep.hooks.Unit;import com.iabcinc.jmep.hooks.Function;//import org.junit.After;//import org.junit.AfterClass;//import org.junit.BeforeClass;import org.junit.Before;import org.junit.Ignore;import org.junit.Test;import java.io.*;import java.text.*;import java.math.BigInteger;import java.util.*;public class TestJMEP {  private Environment env;  @Before public void initializeEnvironment() {      env = new Environment();      /* add a unit called 'mm' to the environment */        env.addUnit( "mm",            new Unit() {            public Object apply(Object oValue) {              if (oValue instanceof Double)                return new Double(0.001*((Double)oValue).doubleValue());              if (oValue instanceof Integer)                return new Double(0.001*((Integer)oValue).intValue());              return null;            }          }        );        /* add a function called 'sin' to the environment */        env.addFunction("sin",          new Function() {            public Object call(Object [] oPars) {              if (oPars == null) return null;              if (oPars.length != 1) return null;              if (oPars[0] instanceof Double || oPars[0] instanceof Integer)                return new Double(Math.sin(((Number)oPars[0]).doubleValue()));              return null;            }          }        );        env.addConstant("e",2.71);        env.addConstant("pi",3.14);        env.addConstant("name","neemsoft");  }  @Test public void variousExpressions() throws XExpression {      Object result;      result = (new Expression("1*2+3*4+(1+2*3)+1",env)).evaluate();      assertEquals(new Integer(22),result);      result = (new Expression("1+4*3^2+1",env)).evaluate();      assertEquals(new Double(38),result);      result = (new Expression("1 <> 2",env)).evaluate();      assertEquals(new Integer(1),result);  }  @Test(expected=ArithmeticException.class) public void divideByZero() throws XExpression {      (new Expression("1/0",env)).evaluate();  }  @Test(expected=com.iabcinc.jmep.XIllegalOperation.class) public void doubleOnEquality() throws XExpression {      Object result;      // Can not compare two double values on equality because of statistical improbability.      result = (new Expression("sin(12.0) = pi",env,true)).evaluate();      assertEquals(Integer.valueOf(0),result);  }  @Test @Ignore public void longExpression() throws XExpression {      Object result = (new Expression("4000000*10",env)).evaluate();      assertEquals(BigInteger.valueOf(1),result);  }  }